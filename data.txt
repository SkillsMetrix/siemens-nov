import { Actions, createEffect, ofType } from '@ngrx/effects'
import { DataService } from 'src/app/Service/data.service';
import { addMovies, addMoviesSuccess, getMovies, getMovieSuccess } from '../Actions/movie.actions';
import { concatMap, exhaustMap, map } from 'rxjs/operators';
import { Injectable } from '@angular/core';

@Injectable()
export class MovieEffect {
    loadMovies$ = createEffect(() =>
        this.action$.pipe(
            ofType(getMovies),
            exhaustMap(() =>
                this.ds.getMovies().pipe(
                    map((movies) => getMovieSuccess(movies))
                )
            )
        )
    )

    addMovie$ = createEffect(() =>
        this.action$.pipe(
            ofType(addMovies),
            concatMap((movie ) =>
                this.ds.addMovies(movie).pipe(
                    map((newMovie) => addMoviesSuccess(newMovie))
                )
            )

        )

    )

    constructor(private action$: Actions, private ds: DataService) { }
}

-----------


import{ createReducer, on } from '@ngrx/store'
import { Movie } from 'src/app/Models/movie'
import { addMovies, addMoviesSuccess, getMovies, getMovieSuccess } from '../Actions/movie.actions'

export interface MovieState{
    movies: ReadonlyArray<Movie>
}

const initialState: ReadonlyArray<Movie>=[]

export const movieReducer=createReducer(
    initialState,
    on(getMovieSuccess,(state,{movies})=> [...movies]),
    on(addMoviesSuccess,(state,{movie})=> [...state,movie])
)


---------------



import { createAction } from '@ngrx/store'
import { Movie } from 'src/app/Models/movie';

export const getMovies=createAction('[Movie] get movie');

export const getMovieSuccess=createAction('[Movie] load movie ',(movies:ReadonlyArray<Movie>)=>({movies}));
export const addMovies=createAction('[Movie] add movie',(movie:Movie)=>(movie));
export const addMoviesSuccess=createAction('[Movie] add movie Success',(movie:Movie)=>({movie}));


----------

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule } from '@angular/common/http';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { MovieListComponent } from './movie-list/movie-list.component';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { MaterialModules } from './app.material.module';
import { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';
import { InMemoryService } from './Service/in-memory.service';
import { FormsModule } from '@angular/forms';
import { StoreModule } from '@ngrx/store';
import { environment } from '../environments/environment';
import { movieReducer } from './Store/Reducers/movie.reducer';
import { StoreDevtoolsModule } from '@ngrx/store-devtools';
import { EffectsModule } from '@ngrx/effects';
import { MovieEffect } from './Store/Effects/movie.effects';

@NgModule({
  declarations: [AppComponent, MovieListComponent],
  imports: [
    BrowserModule,
    AppRoutingModule,
    BrowserAnimationsModule,
    FormsModule,
    MaterialModules,
    HttpClientModule,
    HttpClientInMemoryWebApiModule.forRoot(InMemoryService),
    StoreModule.forRoot({movies:movieReducer}),
    StoreDevtoolsModule.instrument({maxAge:25, logOnly:environment.production}),
    EffectsModule.forRoot([MovieEffect])
  ],
  providers: [],
  bootstrap: [AppComponent],
})
export class AppModule {}
